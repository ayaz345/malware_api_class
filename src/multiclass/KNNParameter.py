

class KNNParameter:
    def __init__(self, n_neighbors, p, algorithm):

        #Embedding
        self.n_neighbors = n_neighbors
        self.p = p
        self.algorithm = algorithm



class KNNParameters:
    def __init__(self):
        # model
        self.parameters = [KNNParameter(3, 3, "auto")]
        self.parameters.append(KNNParameter(3, 5, "auto"))
        self.parameters.append(KNNParameter(3, 7, "auto"))

        self.parameters.append(KNNParameter(3, 2, "ball_tree"))
        self.parameters.append(KNNParameter(3, 2, "kd_tree"))
        self.parameters.append(KNNParameter(3, 2, "brute"))

        self.parameters.append(KNNParameter(5, 2, "ball_tree"))
        self.parameters.append(KNNParameter(5, 2, "kd_tree"))
        self.parameters.append(KNNParameter(5, 2, "brute"))

        self.parameters.append(KNNParameter(7, 2, "brute"))

        self.parameters.append(KNNParameter(3, 3, "auto"))
        self.parameters.append(KNNParameter(3, 5, "auto"))
        self.parameters.append(KNNParameter(3, 7, "auto"))

        self.parameters.append(KNNParameter(3, 2, "ball_tree"))
        self.parameters.append(KNNParameter(3, 2, "kd_tree"))
        self.parameters.append(KNNParameter(3, 2, "brute"))

        self.parameters.append(KNNParameter(5, 2, "ball_tree"))
        self.parameters.append(KNNParameter(5, 2, "kd_tree"))
        self.parameters.append(KNNParameter(5, 2, "brute"))

        self.parameters.append(KNNParameter(7, 2, "brute"))

        self.index = 0


